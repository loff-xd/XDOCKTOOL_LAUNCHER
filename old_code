import os
import stat
import shutil
import sys
import time

import requests
import github
import zipfile
import cffi  # DO NOT REMOVE THIS WILL BREAK THE EXE VERSION

application_version = "1.0.3"
print("Current version: " + application_version)


persistent_files = ["manifests.json", "update", "update_log.txt"]
application_file = "XDOCK_MANAGER.exe"


def print_log(log):
    with open(os.path.join(os.environ['USERPROFILE'], "xdt_update_log.txt"), "a") as log_file:
        log_file.write(log + "\n")


def do_update():
    if "GTOKEN" in os.environ.keys():
        g = github.Github(os.environ.get("GTOKEN"))
    else:
        g = github.Github()

    try:
        application_folder = os.getcwd()
        update_folder = os.path.join(application_folder, 'update\\XDOCK_MANAGER')
        zip_target = os.path.join(application_folder, 'update')

        # Get latest release
        release = g.get_user(login='loff-xd').get_repo("XDOCKTOOL").get_latest_release().get_assets()[0]
        update = requests.get(release.browser_download_url, allow_redirects=True)
        open("update.zip", 'wb').write(update.content)

        print_log("Unzip update")
        # Unzip and remove the zip
        with zipfile.ZipFile("update.zip", 'r') as update_zip:
            update_zip.extractall(zip_target)
        os.remove("update.zip")

        # Set permissions
        os.chdir(update_folder)
        update_files = os.listdir()
        for file_name in update_files:
            os.chmod(file_name, stat.S_IWRITE)

        print_log("Update staged")
        os.spawnl(os.P_NOWAIT, application_file, 'do_update')
        sys.exit()

    except Exception as e:
        print_log("Unable to get update:\n" + str(e))


def finish_update(update_queued):
    if update_queued:
        time.sleep(3)
        update_path = os.getcwd()
        print_log("Update queued for install")
        os.chdir("..")
        os.chdir("..")
        update_target = os.getcwd()

        remove_files = os.listdir(update_target)
        for file_name in remove_files:
            if not (file_name in persistent_files):
                try:
                    os.chmod(file_name, stat.S_IWRITE)
                    if os.path.isdir(file_name):
                        shutil.rmtree(file_name)
                    else:
                        os.remove(file_name)
                    print_log("RM:" + file_name)

                except Exception as e:
                    print_log("!!:" + file_name + "\n" + str(e))
            else:
                print_log("SK:" + file_name + "\n")

        time.sleep(3)
        os.chdir(update_path)
        update_files = os.listdir()
        for file_name in update_files:
            try:
                if os.path.isdir(file_name):
                    shutil.copytree(file_name, os.path.join(update_target, file_name))
                else:
                    shutil.copy(file_name, os.path.join(update_target, file_name))
                print_log("CP:" + file_name)
            except Exception as e:
                print_log("!!:" + file_name + "\n" + str(e))

        os.chdir(update_target)
        os.spawnl(os.P_NOWAIT, application_file, 'do_update')
        sys.exit()


def check_new_version():
    if os.path.isdir("update"):
        print_log("Update finished")
        os.chmod("update", stat.S_IWRITE)
        shutil.rmtree("update")
    else:
        if "GTOKEN" in os.environ.keys():
            g = github.Github(os.environ.get("GTOKEN"))
        else:
            g = github.Github()

        release = g.get_user(login='loff-xd').get_repo("XDOCKTOOL").get_latest_release().title
        ver = int("".join(filter(str.isdigit, release)))
        current_ver = int("".join(filter(str.isdigit, application_version)))
        if ver > current_ver:
            return True
        else:
            return False
